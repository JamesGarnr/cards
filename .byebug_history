c
cc
response.code
c
@user.save
user.save
@user = User.new(user_params)
user_params
c
params
c
params: { 'user': {email: 'testingdev@example.com', password: 'testing1234', role: 1} }
params: { 'user' => {email: 'testingdev@example.com', password: 'testing1234', role: 1} }
params
post :create, params: { 'user' => {email: 'testingdev@example.com', password: 'testing1234', role: 1} }
c
params.require(:user).permit(:first_name, :last_name, :email, :password, :role).tap { |params| params[:role] = params[:role].to_i }
params
c
params[:userc]
params[:user]
params
c
params
c
post :create, params: { "user_id"=> 1 }
post :create, params: { user_id: 1 }
c
expect(response.status).to eql(:ok)
responseexpect(response.status).to eql(:ok)
responseexpect(response.status).to eql(:OK)
response
response.status
c
get users_path
c
get tasks_path
get users_path
get '/'
get users_path
c
get root_path
get roo_path
root_path
root_url
get root_url
c
get root_url
root_path
c
root_url
get '/'
root_url
 get root_url
c
user.first_name
user.name
c
User.id_ordered_desc(user).ids
User.id_ordered_desc(user)
user
c
user
user = user.save
user
c
user
user = user.save
user.save.error
user.save.errors
user.save!
user.save
expect(user.save).to eq(true)
expect(user.save).to eq(false)
c
user
c
self
c
self
c
self
c
email
self
c
user
self
email
c
user
c
user
c
user
user.team_mate?
